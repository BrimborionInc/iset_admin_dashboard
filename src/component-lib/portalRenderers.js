import React from 'react';

// Vendored copy of portal renderers from ISET-intake/src/renderer/renderers.js
// Reason: CRA build disallows importing files outside src/. Keep this file in sync when portal changes.

// Simple content renderers (static blocks)
export function Paragraph(p){useGovUkInit();const{comp,lang='en'}=p;const cls=comp.class||comp.classes||comp.className||'govuk-body';const content=t(lang,comp.text||comp.label||comp.html||'');const isHeading=/govuk-heading-(xl|l|m|s)/.test(cls);const Tag=isHeading?'h2':'p';return(<Tag className={cls}>{content}</Tag>);}
export function InsetText(p){useGovUkInit();const{comp,lang='en'}=p;const base='govuk-inset-text';const extra=[comp.class,comp.classes,comp.className].filter(Boolean).join(' ');const cls=extra?`${base} ${extra}`:base;return(<div className={cls}>{t(lang,comp.text||comp.label||comp.html||'')}</div>);}

function useGovUkInit() {
  React.useEffect(() => {
    if (typeof window !== 'undefined' && window.GOVUKFrontend && typeof window.GOVUKFrontend.initAll === 'function') {
      try { window.GOVUKFrontend.initAll(); } catch (_) {}
    }
  }, []);
}
function t(lang, v) { if (v && typeof v === 'object') return v[lang] ?? v.en ?? ''; return v ?? ''; }

// ---- (Trimmed) Minimal subset needed currently for admin interactive preview ----
export function Radio(p){useGovUkInit();const{comp,lang='en',value,onChange,error,render}=p;const name=comp.name||comp.storageKey||comp.id||'radio';const items=Array.isArray(comp.items)?comp.items:(Array.isArray(comp.options)?comp.options:[]);const idBase=comp.idPrefix||name;const hintId=`${idBase}-hint`;const errorId=`${idBase}-error`;const describedBy=[comp.hint?hintId:null,error?errorId:null].filter(Boolean).join(' ')||undefined;return(<div className={`govuk-form-group${error?' govuk-form-group--error':''}`}><fieldset className="govuk-fieldset" aria-describedby={describedBy}>{comp.label&&(<legend className={`govuk-fieldset__legend${comp.legendClass?' '+comp.legendClass:' govuk-fieldset__legend--m'}`}>{t(lang,comp.label)}</legend>)}{comp.hint&&<div id={hintId} className="govuk-hint">{t(lang,comp.hint)}</div>}{error&&(<p id={errorId} className="govuk-error-message"><span className="govuk-visually-hidden">Error:</span> {error}</p>)}<div className="govuk-radios" data-module="govuk-radios">{items.map((it,idx)=>{const id=it.id||`${idBase}-${idx}`;const checked=String(value)===String(it.value);const reveal=Array.isArray(it.children)?it.children:(it.conditional&&Array.isArray(it.conditional.children)?it.conditional.children:null);const revealId=reveal?`${id}-reveal`:undefined;return(<div className="govuk-radios__item" key={id}><input className="govuk-radios__input" id={id} name={name} type="radio" value={String(it.value)} checked={!!checked} onChange={()=>onChange&&onChange(it.value)} {...(reveal?{'data-aria-controls':revealId}:{})}/><label className="govuk-label govuk-radios__label" htmlFor={id}>{t(lang,it.label)}</label>{it.hint&&<div className="govuk-hint govuk-radios__hint">{t(lang,it.hint)}</div>}{reveal&&(<div className="govuk-radios__conditional" id={revealId} hidden={!checked}>{reveal.map((child,i)=>render?render({...child,id:child.id||`${id}-child-${i}`}):null)}</div>)}</div>);})}</div></fieldset></div>);}
export function Input(p){useGovUkInit();const{comp,lang='en',value='',onChange,error}=p;const name=comp.storageKey||comp.id||'input';const id=name;const hintId=`${id}-hint`;const errorId=`${id}-error`;const type=comp.inputType||'text';const clsBase=comp.class||'govuk-input';const cls=error?`${clsBase} govuk-input--error`:clsBase;const required=!!comp.required;const handleChange=e=>onChange&&onChange(e.target.value);const handleBlur=e=>{if(typeof comp.normalize==='string'&&comp.normalize.toLowerCase()==='trim'){const trimmed=(e.target.value||'').trim();if(trimmed!==e.target.value)onChange&&onChange(trimmed);}};const groupCls=`govuk-form-group${error?' govuk-form-group--error':''}${comp.formGroupClass?' '+comp.formGroupClass:''}`;return(<div className={groupCls}>{comp.label&&(<label className={`govuk-label${comp.labelClass?' '+comp.labelClass:''}`} htmlFor={id}>{t(lang,comp.label)}</label>)}{comp.hint&&(<div id={hintId} className="govuk-hint">{t(lang,comp.hint)}</div>)}{error&&<p id={errorId} className="govuk-error-message"><span className="govuk-visually-hidden">Error:</span> {error}</p>}<div className="govuk-input__wrapper"><input className={cls} id={id} name={name} type={type} value={value||''} onChange={handleChange} onBlur={handleBlur} required={required}/></div></div>);}
export function Textarea(p){useGovUkInit();const{comp,lang='en',value='',onChange,error}=p;const name=comp.storageKey||comp.id||'textarea';const id=name;const hintId=`${id}-hint`;const errorId=`${id}-error`;const clsBase=comp.class||'govuk-textarea';const cls=error?`${clsBase} govuk-textarea--error`:clsBase;const required=!!comp.required;const rows=comp.rows||5;const handleChange=e=>onChange&&onChange(e.target.value);const handleBlur=e=>{if(typeof comp.normalize==='string'&&comp.normalize.toLowerCase()==='trim'){const trimmed=(e.target.value||'').trim();if(trimmed!==e.target.value)onChange&&onChange(trimmed);}};return(<div className={`govuk-form-group${error?' govuk-form-group--error':''}`}>{comp.label&&(<label className={`govuk-label${comp.labelClass?' '+comp.labelClass:''}`} htmlFor={id}>{t(lang,comp.label)}</label>)}{comp.hint&&(<div id={hintId} className="govuk-hint">{t(lang,comp.hint)}</div>)}{error&&<p id={errorId} className="govuk-error-message"><span className="govuk-visually-hidden">Error:</span> {error}</p>}<textarea className={cls} id={id} name={name} rows={rows} value={value||''} onChange={handleChange} onBlur={handleBlur} required={required}/></div>);}
export function Select(p){useGovUkInit();const{comp,lang='en',value,onChange,error}=p;const name=comp.storageKey||comp.id||'select';const id=name;const hintId=`${id}-hint`;const errorId=`${id}-error`;const clsBase=comp.class||'govuk-select';const cls=error?`${clsBase} govuk-select--error`:clsBase;const required=!!comp.required;const items=Array.isArray(comp.options)?comp.options:[];const multiple=!!comp.multiple;const current=value===undefined||value===null?(multiple?[]:''):value;const handleChange=e=>{if(!onChange)return;if(multiple){const selected=Array.from(e.target.selectedOptions).map(o=>o.value);onChange(selected);}else{onChange(e.target.value);}};return(<div className={`govuk-form-group${error?' govuk-form-group--error':''}`}>{comp.label&&(<label className={`govuk-label${comp.labelClass?' '+comp.labelClass:''}`} htmlFor={id}>{t(lang,comp.label)}</label>)}{comp.hint&&(<div id={hintId} className="govuk-hint">{t(lang,comp.hint)}</div>)}{error&&<p id={errorId} className="govuk-error-message"><span className="govuk-visually-hidden">Error:</span> {error}</p>}<select className={cls} id={id} name={name} required={required} multiple={multiple} value={current} onChange={handleChange}>{!multiple&&<option value=""></option>}{items.map((it,idx)=>(<option key={`${id}-${idx}`} value={String(it.value)}>{t(lang,it.label)}</option>))}</select></div>);}
export function Checkbox(p){useGovUkInit();const{comp,lang='en',value,onChange,error,render}=p;const name=comp.name||comp.storageKey||comp.id||'checkbox';const items=Array.isArray(comp.options)?comp.options:[];const current=Array.isArray(value)?value.map(String):[];const idBase=comp.idPrefix||name;const hintId=`${idBase}-hint`;const errorId=`${idBase}-error`;const describedBy=[comp.hint?hintId:null,error?errorId:null].filter(Boolean).join(' ')||undefined;const toggle=val=>{if(!onChange)return;const sVal=String(val);const set=new Set(current);if(set.has(sVal))set.delete(sVal);else set.add(sVal);onChange(Array.from(set));};return(<div className={`govuk-form-group${error?' govuk-form-group--error':''}`}><fieldset className="govuk-fieldset" aria-describedby={describedBy}>{comp.label&&(<legend className="govuk-fieldset__legend govuk-fieldset__legend--m">{t(lang,comp.label)}</legend>)}{comp.hint&&<div id={hintId} className="govuk-hint">{t(lang,comp.hint)}</div>}{error&&<p id={errorId} className="govuk-error-message"><span className="govuk-visually-hidden">Error:</span> {error}</p>}<div className="govuk-checkboxes" data-module="govuk-checkboxes">{items.map((it,idx)=>{const id=it.id||`${idBase}-${idx}`;const checked=current.includes(String(it.value));const reveal=Array.isArray(it.children)?it.children:(it.conditional&&Array.isArray(it.conditional.children)?it.conditional.children:null);const revealId=reveal?`${id}-reveal`:undefined;return(<div className="govuk-checkboxes__item" key={id}><input className="govuk-checkboxes__input" id={id} name={name} type="checkbox" value={String(it.value)} checked={!!checked} onChange={()=>toggle(it.value)} {...(reveal?{'data-aria-controls':revealId}:{})}/><label className="govuk-label govuk-checkboxes__label" htmlFor={id}>{t(lang,it.label)}</label>{it.hint&&<div className="govuk-hint govuk-checkboxes__hint">{t(lang,it.hint)}</div>}{reveal&&(<div className="govuk-checkboxes__conditional" id={revealId} hidden={!checked}>{reveal.map((child,i)=>render?render({...child,id:child.id||`${id}-child-${i}`}):null)}</div>)}</div>);})}</div></fieldset></div>);}
export function DateParts(p){useGovUkInit();const{comp,lang='en',value,onChange,error}=p;const name=comp.storageKey||comp.id||'date';const id=name;const hintId=`${id}-hint`;const errorId=`${id}-error`;const required=!!comp.required;let v={day:'',month:'',year:''};if(value&&typeof value==='object'){v={...v,...value};}else if(typeof value==='string'&&/^\d{4}-\d{2}-\d{2}$/.test(value)){const[y,m,d]=value.split('-');v={day:d,month:m,year:y};}const commit=next=>{if(!onChange)return;const n=(comp.normalize||'').toLowerCase();if(n==='date-iso'){const d=String(next.day||'').padStart(2,'0');const m=String(next.month||'').padStart(2,'0');const y=String(next.year||'');if(y.length===4&&m!=='00'&&d!=='00'){onChange(`${y}-${m}-${d}`);return;}}onChange(next);};const onChangePart=key=>e=>{const val=e.target.value.replace(/[^0-9]/g,'');commit({...v,[key]:val});};return(<div className={`govuk-form-group${error?' govuk-form-group--error':''}`}><fieldset className="govuk-fieldset" aria-describedby={[comp.hint?hintId:null,error?errorId:null].filter(Boolean).join(' ')||undefined}>{comp.label&&(<legend className="govuk-fieldset__legend govuk-fieldset__legend--m">{t(lang,comp.label)}</legend>)}{comp.hint&&<div id={hintId} className="govuk-hint">{t(lang,comp.hint)}</div>}{error&&<p id={errorId} className="govuk-error-message"><span className="govuk-visually-hidden">Error:</span> {error}</p>}<div className="govuk-date-input" id={id} data-module="govuk-date-input"><div className="govuk-date-input__item"><div className="govuk-form-group"><label className="govuk-label govuk-date-input__label" htmlFor={`${id}-day`}>{lang==='fr'?'Jour':'Day'}</label><input className={`govuk-input govuk-date-input__input govuk-input--width-2${error?' govuk-input--error':''}`} id={`${id}-day`} name={`${name}-day`} type="text" inputMode="numeric" pattern="[0-9]*" value={v.day||''} onChange={onChangePart('day')} required={required}/></div></div><div className="govuk-date-input__item"><div className="govuk-form-group"><label className="govuk-label govuk-date-input__label" htmlFor={`${id}-month`}>{lang==='fr'?'Mois':'Month'}</label><input className={`govuk-input govuk-date-input__input govuk-input--width-2${error?' govuk-input--error':''}`} id={`${id}-month`} name={`${name}-month`} type="text" inputMode="numeric" pattern="[0-9]*" value={v.month||''} onChange={onChangePart('month')} required={required}/></div></div><div className="govuk-date-input__item"><div className="govuk-form-group"><label className="govuk-label govuk-date-input__label" htmlFor={`${id}-year`}>{lang==='fr'?'Année':'Year'}</label><input className={`govuk-input govuk-date-input__input govuk-input--width-4${error?' govuk-input--error':''}`} id={`${id}-year`} name={`${name}-year`} type="text" inputMode="numeric" pattern="[0-9]*" value={v.year||''} onChange={onChangePart('year')} required={required}/></div></div></div></fieldset></div>);}
export function SummaryList({ comp, lang='en', values }) {const rows=Array.isArray(comp.rows)?comp.rows:[];const hideEmpty=comp.hideEmpty!==false;const yesNo=val=>{if(val===true||val===1||String(val).toLowerCase()==='true'||String(val).toLowerCase()==='yes')return lang==='fr'?'Oui':'Yes';if(val===false||val===0||String(val).toLowerCase()==='false'||String(val).toLowerCase()==='no')return lang==='fr'?'Non':'No';if(val==null||val==='')return'';return String(val);};const formatCurrency=val=>{const num=Number(val);if(!Number.isFinite(num))return val==null?'':String(val);try{return new Intl.NumberFormat(lang==='fr'?'fr-CA':'en-CA',{style:'currency',currency:'CAD'}).format(num);}catch(_){return`$${num.toFixed(2)}`;}};const formatDate=val=>{if(!val)return'';let y,m,d;if(typeof val==='string'&&/^\d{4}-\d{2}-\d{2}$/.test(val)){[y,m,d]=val.split('-');}else if(typeof val==='object'){y=val.year||val.y;m=val.month||val.m;d=val.day||val.d;}if(y&&m&&d){const dt=new Date(Number(y),Number(m)-1,Number(d));if(!isNaN(dt.getTime())){try{return dt.toLocaleDateString(lang==='fr'?'fr-CA':'en-CA',{year:'numeric',month:'long',day:'numeric'});}catch(_){return`${y}-${m}-${d}`;}}}return typeof val==='string'?val:JSON.stringify(val);};const asText=val=>{if(val==null)return'';if(Array.isArray(val))return val.join(', ');if(typeof val==='object')return JSON.stringify(val);return String(val);};const applyFormat=(fmt,val)=>{switch(fmt){case 'yesno':return yesNo(val);case 'currency':return formatCurrency(val);case 'date':return formatDate(val);case 'text':default:return asText(val);}};const rendered=rows.map(r=>{const rawVal=values?values[r.key]:undefined;const formatted=applyFormat(r.format||'text',rawVal);return{label:t(lang,r.label||r.key),value:formatted};});const filtered=hideEmpty?rendered.filter(r=>r.value!==undefined&&r.value!==null&&String(r.value).trim()!==''):rendered;if(filtered.length===0){if(comp.emptyFallback){return <p className="govuk-body">{t(lang,comp.emptyFallback)}</p>;}return null;}return(<dl className="govuk-summary-list">{filtered.map((r,i)=>(<div className="govuk-summary-list__row" key={i}><dt className="govuk-summary-list__key">{r.label}</dt><dd className="govuk-summary-list__value">{r.value}</dd></div>))}</dl>);}

// CharacterCount (trimmed version – counts characters or words, mirrors portal logic subset)
export function CharacterCount(p){useGovUkInit();const{comp,lang='en',value='',onChange,error}=p;const name=comp.storageKey||comp.id||'character-count';const id=name;const hintId=`${id}-hint`;const errorId=`${id}-error`;const messageId=`${id}-info`;const max=comp.maxLength||comp?.validation?.maxLength||200;const maxWords=comp.maxWords||comp?.validation?.maxWords;const threshold=comp.threshold||comp?.validation?.threshold;const textarea=comp.textarea!==false;const required=!!comp.required;const remainingMessage=React.useCallback(current=>{if(maxWords){const words=(current||'').trim().split(/\s+/).filter(Boolean).length;const remain=maxWords-words;if(remain<=0)return lang==='fr'?`Vous avez dépassé la limite de ${maxWords} mots`:`You have exceeded the limit of ${maxWords} words`;return lang==='fr'?`Il vous reste ${remain} mot${remain===1?'':'s'}`:`${remain} word${remain===1?'':'s'} remaining`;}const chars=(current||'').length;const remain=max-chars;if(remain<0){const over=Math.abs(remain);return lang==='fr'?`Vous avez dépassé la limite de ${max} caractères de ${over}`:`${over} character${over===1?'':'s'} too many`;}return lang==='fr'?`Il vous reste ${remain} caractère${remain===1?'':'s'}`:`${remain} character${remain===1?'':'s'} remaining`;},[lang,max,maxWords]);const computeState=React.useCallback(current=>{if(maxWords){const words=(current||'').trim().split(/\s+/).filter(Boolean).length;return{remaining:maxWords-words,over:words>maxWords,nearLimit:false};}const remain=max-(current||'').length;const near=threshold&&remain<=Math.ceil(max*(1-threshold/100))&&remain>=0;return{remaining:remain,over:remain<0,nearLimit:near};},[max,maxWords,threshold]);const [counter,setCounter]=React.useState(()=>remainingMessage(value));const [st,setSt]=React.useState(()=>computeState(value));React.useEffect(()=>{setCounter(remainingMessage(value));setSt(computeState(value));},[value,remainingMessage,computeState]);const handleChange=e=>{onChange&&onChange(e.target.value);setCounter(remainingMessage(e.target.value));setSt(computeState(e.target.value));};const ds={};if(max&&!maxWords)ds['data-maxlength']=String(max);if(maxWords)ds['data-maxwords']=String(maxWords);if(threshold)ds['data-threshold']=String(threshold);const controlBase=textarea?(comp.class||'govuk-textarea'):(comp.class||'govuk-input');const controlDyn=st.over?(textarea?'govuk-textarea--error':'govuk-input--error'):(st.nearLimit?(textarea?'govuk-textarea--near-limit':'govuk-input--near-limit'):'');const clsControl=`${controlBase}${controlDyn?' '+controlDyn:''}`;return(<div className="govuk-character-count" data-module="govuk-character-count" {...ds}><div className={`govuk-form-group${error||st.over?' govuk-form-group--error':''}`}>{comp.label&&<label className={`govuk-label${comp.labelClass?' '+comp.labelClass:''}`} htmlFor={id}>{t(lang,comp.label)}</label>}{comp.hint&&<div id={hintId} className="govuk-hint">{t(lang,comp.hint)}</div>}{(error||st.over)&&<p id={errorId} className="govuk-error-message"><span className="govuk-visually-hidden">Error:</span> {error||(lang==='fr'?'Trop de caractères':'Too many characters')}</p>}{textarea?(<textarea className={clsControl} id={id} name={name} rows={comp.rows||5} aria-describedby={[comp.hint?hintId:null,error?errorId:null,messageId].filter(Boolean).join(' ')||undefined} value={value||''} onChange={handleChange} required={required} maxLength={!maxWords&&max?max:undefined}/>):(<input className={clsControl} id={id} name={name} type="text" aria-describedby={[comp.hint?hintId:null,error?errorId:null,messageId].filter(Boolean).join(' ')||undefined} value={value||''} onChange={handleChange} required={required} maxLength={!maxWords&&max?max:undefined}/> )}</div><div id={messageId} className={`govuk-hint govuk-character-count__message${st.over?' govuk-character-count__message--warning':st.nearLimit?' govuk-character-count__message--near-limit':''}`} aria-live="polite">{counter}</div></div>);}

// Minimal placeholder for file-upload component preview
export function FileUpload(p){useGovUkInit();const { comp, lang='en' } = p;const id=comp.id||comp.storageKey||'file-upload';const multiple=!!comp.multiple;const accept=(comp.accept && Array.isArray(comp.accept)?comp.accept:(comp.accept?String(comp.accept).split(/[,\s]+/):[])).filter(Boolean);const minFiles=Number(comp.minFiles||comp.min_files||0)||0;const maxFiles=Number(comp.maxFiles||comp.max_files||(multiple?(comp.max_files||comp.maxfiles||5):1))||(multiple?5:1);const maxSizeMb=Number(comp.maxSizeMb||comp.max_size_mb||10)||10;const label=t(lang, comp.label || 'Upload files');const hint=t(lang, comp.hint || `You can upload up to ${maxFiles} file${maxFiles===1?'':'s'} (${maxSizeMb} MB each).`);return (<div className="govuk-form-group"><label className="govuk-label" htmlFor={id}>{label}</label>{hint && <div className="govuk-hint">{hint}</div>}<div className="govuk-input__wrapper"><input className="govuk-file-upload" id={id} name={id+(multiple?'[]':'')} type="file" multiple={multiple} accept={accept.length?accept.join(','):undefined} data-min-files={minFiles} data-max-files={maxFiles} data-max-size-mb={maxSizeMb} disabled /></div><p className="govuk-body-s">(Preview only – uploads disabled)</p></div>);}

export const registry={radio:Radio,panel:({comp})=>comp.label?<div className="govuk-panel govuk-panel--confirmation"><h2 className="govuk-panel__title">{t('en',comp.label)}</h2>{comp.hint&&<div className="govuk-panel__body">{t('en',comp.hint)}</div>}</div>:null,input:Input,text:Input,email:Input,phone:Input,password:Input,number:Input,textarea:Textarea,select:Select,checkbox:Checkbox,date:DateParts,'summary-list':SummaryList,'date-input':DateParts,checkboxes:Checkbox,'character-count':CharacterCount,paragraph:Paragraph,'text-block':Paragraph,'inset-text':InsetText,'file-upload':FileUpload};
export default registry;
