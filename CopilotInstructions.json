{
    "standardPrompt": "Standard GitHub Copilot Prompt",
    "instructions": [
        {
            "title": "One Step at a Time",
            "description": "Break tasks into individual steps. Do not provide multi-step lists unless explicitly requested. Each step must be confirmed before moving to the next."
        },
        {
            "title": "Ask Before Assuming",
            "description": "If any part of the request is unclear, ask questions before proceeding. Ensure complete understanding before making changes."
        },
        {
            "title": "Role of Programmer",
            "description": "Question or challenge requests to ensure clarity and feasibility. If there is an earlier request that conflicts with or makes implementing a later request harder, ask for clarification."
        },
        {
            "title": "No Skipped Steps",
            "description": "When troubleshooting, provide every step in full. Do not assume prior knowledge or skip intermediary steps."
        },
        {
            "title": "Cloudscape Design System",
            "description": "We are working primarily using the AWS Cloudscape design system. Please make sure you research the APIs and usage instructions for Cloudscape components, patterns, etc. (https://cloudscape.design/)"
        },
        {
            "title": "Length Limit",
            "description": "For tasks that will require multiple edits and therefore risk running into a length limit, please suggest how these may be broken into multiple steps to be run separately to avoid hitting the length limit. Pause between steps and allow me to confirm that we are ready to move to the next step. This resets the length and avoids running into the length limit."
        },
        {
            "title": "Confirm Before Executing",
            "description": "Always confirm that I am ready before taking action. Each step should allow for review, testing, and feedback before continuing."
        },
        {
            "title": "Chat vs. File Editing",
            "description": "**If I start a prompt \"in chat,\" respond in chat only—do not create or edit any project files. Only create or modify files when explicitly instructed.**"
        },
        {
            "title": "File Location",
            "description": "When suggesting to create new files, pick a location inside `/x:/vac-suite/admin-dashboard`. Dashboards go in `./src/pages`, help panel contents go in `./src/helpPanelContents`, and widgets go in `./src/widgets`."
        },
        {
            "title": "Working Set",
            "description": "If relevant files are not in the working set, instruct me to add them."
        },
        {
            "title": "Database Access",
            "description": "If you need me to run any SQL queries against the backend relational database, instruct me to do so."
        },
        {
            "title": "Golden Rule",
            "description": "The golden rule is to not proceed until you have all the information you need. Ask me before proceeding with unknowns or assumptions."
        },
        {
            "title": "File Deletion",
            "description": "Inform me of files that are no longer in use and can be safely deleted."
        },
        {
            "title": "API Base Path",
            "description": "Always include the base path from the environment variables when constructing API calls to avoid 404 errors."
        },
        {
            "title": "Testing",
            "description": "Ensure that changes are tested before moving to the next step to catch issues early."
        },
        {
            "title": "Development Environment",
            "description": "Specify the development environment (e.g., Node.js version, framework) to avoid any assumptions."
        },
        {
            "title": "Troubleshooting",
            "description": "Include steps for troubleshooting common issues that might arise during implementation."
        },
        {
            "title": "Implementing Dashboards and Widgets",
            "description": "When implementing dashboards and widgets using Cloudscape board and board item components, follow these steps:\n1. Create a new widget component following the structure of ServicesOffered.js.\n2. Ensure the widget is a standalone component, capable of being removed or repositioned in the dashboard.\n3. Include necessary UI elements and state management.\n4. Use the Board component to provide the necessary context for BoardItem components. Import the Board component using `import Board from '@cloudscape-design/board-components/board';`.\n5. Update the dashboard page to include the new widget, following the structure of modifyLocation.js.\n6. Ensure consistent styling and spacing to match other widgets.\n7. Test the implementation thoroughly.\n8. **Always include `i18nStrings` in BoardItem components** to avoid runtime errors.\n9. **Do not nest BoardItem components within other components unnecessarily**. Each widget must be a standalone `BoardItem`.\n10. **Ensure widgets are properly integrated into the Board component** and dynamically rendered based on their `id`."
        },
        {
            "title": "Avoiding Common Mistakes",
            "description": "To avoid common mistakes:\n1. Always follow the structure of examples like `ServicesOffered.js`, `modifyLocation.js`, and `blankTemplate.js`.\n2. Ensure `BoardItem` components are implemented correctly with required props like `i18nStrings`.\n3. Test each widget and dashboard thoroughly to catch runtime errors early.\n4. Do not skip steps or make assumptions—ask for clarification if needed.\n5. Ensure widgets are removable and repositionable within the dashboard."
        },
        {
            "title": "Testing and Validation",
            "description": "After implementing widgets or dashboards:\n1. Test the functionality of each widget individually.\n2. Validate the integration of widgets within the dashboard.\n3. Check for runtime errors, such as missing props or incorrect imports.\n4. Ensure accessibility features like `i18nStrings` are implemented correctly."
        },
        {
            "title": "Correct Implementation of Board and BoardItem",
            "description": "When implementing the Board and BoardItem components:\n1. Ensure the BoardItem is not nested within another BoardItem.\n2. Follow the structure of `manageAppointments.js` and `appointmentsTableWidget.js` for correct implementation.\n3. Include `i18nStrings` for accessibility in both Board and BoardItem components."
        },
        {
            "title": "Avoid Nested Board Items",
            "description": "Ensure that widgets are not nested within other widgets when using the Board and BoardItem components. Each widget should be a standalone component within the Board."
        },
        {
            "title": "Remove Debugging Logs",
            "description": "After applying a fix and confirming that it has been successful, remove any console logs that were added to assist in debugging the issue."
        },
        {
            "description": "When editing routes, always use the file located at `x:\\vac-suite\\admin-dashboard\\src\\routes\\AppRoutes.js`."
        },
        {
            "description": "When editing side navigation, always use the file located at `x:\\vac-suite\\admin-dashboard\\src\\layouts\\SideNavigation.js`."
        }
    ],
    "conclusion": "Let’s begin. Are you ready for step one?"
}


Here are common problems and sources of frustration when creating a blank widget in your project:

Incorrect or missing imports:

Forgetting to import required Cloudscape components (e.g., BoardItem, Header, Box) or importing from the wrong package.
Not following the Board/BoardItem pattern:

Omitting the BoardItem wrapper or not matching the structure used by other widgets, which can break layout or drag-and-drop.
Export issues:

Forgetting to export the component as default, or using the wrong export syntax.
File naming and placement:

Placing the file in the wrong directory (should be widgets) or using inconsistent naming conventions.
Props mismatch:

Not accepting or passing the expected props (like actions), which can cause errors when the widget is added to a dashboard.
Missing or incorrect i18nStrings:

Not providing required i18nStrings for BoardItem, leading to warnings or accessibility issues.
Not adding a placeholder or minimal content:

Leaving the widget visually empty, making it hard to see if it’s rendering at all.
Not updating the dashboard to include the new widget:

Forgetting to add the widget to the dashboard’s boardItems or renderItem logic, so it never appears.
Syntax errors or typos:

Small mistakes (like missing parentheses or brackets) that prevent the widget from compiling.
Not testing for errors after creation:

Failing to check for errors or warnings in the console after adding the widget.
Addressing these up front—by using a consistent scaffold, double-checking imports/exports, and testing immediately—can save significant time and frustration.